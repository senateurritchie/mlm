<?php

namespace AppBundle\Repository;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Doctrine\ORM\QueryBuilder;

use AppBundle\Entity\User;

/**
 * MembreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembreRepository extends \Doctrine\ORM\EntityRepository implements UserLoaderInterface
{
	public function loadUserByUsername($username){
        return $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->andWhere('u.state = :state')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->setParameter('state', "activate")
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function search($params = array(),$limit = 16,$offset=0){
		$qb = $this->createQueryBuilder("u");

		$params = array_filter($params,function($el){
            if(is_array($el)){
                return $el;
            }
            return strip_tags(trim($el));
        });

		// recherche par terms
		if(@$params["q"]){
			$this->whereTerms($qb,@$params["q"]);
		}

		// recherche par id
		if(@$params["id"]){
			$this->whereId($qb,@$params["id"]);
		}

		// ordre d'affichage par nom
		if(@$params['order_name']){
			$order = strtoupper(trim($params['order_name'])) == "ASC" ? "ASC" : "DESC";
			$qb->orderBy("u.username",$order);
		}

		// ordre d'affichage par date
		if(@$params['order_year']){
			$order = strtoupper(trim($params['order_year'])) == "ASC" ? "ASC" : "DESC";
			$qb->orderBy("u.createAt",$order);
		}

		if(!@$params['order_name'] && !@$params['order_year']){
			$qb->orderBy("u.id","DESC");
		}

	    // limit et offset
	    $qb->setFirstResult( $offset )
   		->setMaxResults( $limit );

   		$query = $qb->getQuery();

	    return $query->getResult();
	}


	public function whereTerms(QueryBuilder $qb,$value){
		$qb->andWhere($qb->expr()->like("u.username", ":q"))
	    ->setParameter("q","%$value%");
	}

	public function whereId(QueryBuilder $qb,$value){
		$qb->andWhere($qb->expr()->eq("u.id", ":id"))
	    ->setParameter("id",$value);
	}


	public function count(){
		return $this->createQueryBuilder('u')
        ->select('count(u.id)')
        ->getQuery()
        ->getSingleScalarResult();
	}
}
